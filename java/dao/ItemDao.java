package dao;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import model.Auction;
import model.Bid;
import model.Employee;
import model.Item;

public class ItemDao {
	
	private enum Types { BOOK, CAR, LAPTOP, DVD };
	

	
	public List<Item> getItems() {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of all the items has to be implemented
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" List
		 */

		List<Item> items = new ArrayList<Item>();
				
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://mysql.fall2018cse305.codyyarwood.com?useLegacyDatetimeCode=false&serverTimezone=America/New_York", "vbayadmin", "cse305rul3z");
			Statement state = con.createStatement();
			String sql = "SELECT * FROM vbaydb.Item";
			ResultSet rs = state.executeQuery(sql);
			while(rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("ItemID"));
				item.setDescription(rs.getString("Description"));
				item.setType(rs.getString("Type"));
				item.setName(rs.getString("Name"));
				item.setNumCopies(rs.getInt("NumAvailable"));
				items.add(item);
			}
			
		} catch(ClassNotFoundException e) {
			e.printStackTrace();
		} catch(SQLException e) {
			e.printStackTrace();
		}
		/*Sample data begins*/
//		for (int i = 0; i < 10; i++) {
//			Item item = new Item();
//			item.setItemID(123);
//			item.setDescription("sample description");
//			item.setType("BOOK");
//			item.setName("Sample Book");
//			item.setNumCopies(2);
//			items.add(item);
//		}
		/*Sample data ends*/
		
		return items;

	}
	
	public List<Item> getBestsellerItems() {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of the bestseller items has to be implemented
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" List
		 */

		List<Item> items = new ArrayList<Item>();
		
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://mysql.fall2018cse305.codyyarwood.com?useLegacyDatetimeCode=false&serverTimezone=America/New_York", "vbayadmin", "cse305rul3z");
			Statement state = con.createStatement();
			String sql = "SELECT * FROM vbaydb.Item I WHERE I.NumSold > 0 ORDER BY I.NumSold desc LIMIT 5";
			ResultSet rs = state.executeQuery(sql);
			while(rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("ItemID"));
				item.setDescription(rs.getString("Description"));
				item.setType(rs.getString("Type"));
				item.setName(rs.getString("Name"));
				item.setNumCopies(rs.getInt("NumAvailable"));
				items.add(item);
			}
			
		} catch(ClassNotFoundException e) {
			e.printStackTrace();
		} catch(SQLException e) {
			e.printStackTrace();
		}
		
		/*Sample data begins*/
//		for (int i = 0; i < 5; i++) {
//			Item item = new Item();
//			item.setItemID(123);
//			item.setDescription("sample description");
//			item.setType("BOOK");
//			item.setName("Sample Book");
//			item.setNumCopies(2);
//			items.add(item);
//		}
		/*Sample data ends*/
		
		return items;

	}

	public List<Item> getSummaryListing(String searchKeyword) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of summary listing of revenue generated by a particular item or item type must be implemented
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
		 * Store the revenue generated by an item in the soldPrice attribute, using setSoldPrice method of each "item" object
		 */

		List<Item> items = new ArrayList<Item>();
				
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://mysql.fall2018cse305.codyyarwood.com?useLegacyDatetimeCode=false&serverTimezone=America/New_York", "vbayadmin", "cse305rul3z");
			Statement state = con.createStatement();
			String sql = "SELECT DISTINCT * FROM 	vbaydb.Item I, vbaydb.Auction A, vbaydb.Post P WHERE	I.ItemID = A.ItemID AND P.AuctionID = A.AuctionID AND (I.Type = \"" + searchKeyword + "\" OR I.Name LIKE \"" + searchKeyword + "\") AND P.ExpireDate < NOW()";
			ResultSet rs = state.executeQuery(sql);
			while(rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("ItemID"));
				item.setDescription(rs.getString("Description"));
				item.setType(rs.getString("Type"));
				item.setName(rs.getString("Name"));
				item.setNumCopies(rs.getInt("NumAvailable"));
				item.setSoldPrice(rs.getDouble("ClosingBid"));
				items.add(item);
			}
			
		} catch(ClassNotFoundException e) {
			e.printStackTrace();
		} catch(SQLException e) {
			e.printStackTrace();
		}
	
		/*Sample data begins*/
//		for (int i = 0; i < 6; i++) {
//			Item item = new Item();
//			item.setItemID(123);
//			item.setDescription("sample description");
//			item.setType("BOOK");
//			item.setName("Sample Book");
//			item.setSoldPrice(150);
//			items.add(item);   ;

//		}
		/*Sample data ends*/
		
		return items;

	}

	public List<Item> getItemSuggestions(String customerID) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch item suggestions for a customer, indicated by customerID, must be implemented
		 * customerID, which is the Customer's ID for whom the item suggestions are fetched, is given as method parameter
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
		 */

		List<Item> items = new ArrayList<Item>();
		
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://mysql.fall2018cse305.codyyarwood.com?useLegacyDatetimeCode=false&serverTimezone=America/New_York", "vbayadmin", "cse305rul3z");
			Statement state = con.createStatement();
			String sql = "SELECT I.* FROM vbaydb.Item I WHERE I.Type IN (SELECT I2.Type FROM vbaydb.Bid B2, vbaydb.Item I2, vbaydb.Auction A2 WHERE B2.CustomerID = " + Integer.valueOf(customerID) + " AND A2.ItemID = I2.ItemID) AND I.ItemID NOT IN (SELECT I3.ItemID FROM vbaydb.Bid B3, vbaydb.Item I3, vbaydb.Auction A3 WHERE B3.CustomerID = " + Integer.valueOf(customerID) + " AND A3.ItemID = I3.ItemID)";
			ResultSet rs = state.executeQuery(sql);
			while(rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("ItemID"));
				item.setDescription(rs.getString("Description"));
				item.setType(rs.getString("Type"));
				item.setName(rs.getString("Name"));
				item.setNumCopies(rs.getInt("NumAvailable"));
				items.add(item);
			}
			
		} catch(ClassNotFoundException e) {
			e.printStackTrace();
		} catch(SQLException e) {
			e.printStackTrace();
		}
		
		/*Sample data begins*/
//		for (int i = 0; i < 4; i++) {
//			Item item = new Item();
//			item.setItemID(123);
//			item.setDescription("sample description");
//			item.setType("BOOK");
//			item.setName("Sample Book");
//			item.setNumCopies(2);
//			items.add(item);
//		}
		/*Sample data ends*/
		
		return items;

	}

	public List getItemsBySeller(String sellerID) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch items sold by a given seller, indicated by sellerID, must be implemented
		 * sellerID, which is the Sellers's ID who's items are fetched, is given as method parameter
		 * The bid and auction details of each of the items should also be fetched
		 * The bid details must have the highest current bid for the item
		 * The auction details must have the details about the auction in which the item is sold
		 * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
		 * Each bid record is required to be encapsulated as a "Bid" class object and added to the "bids" List
		 * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items, bids and auctions Lists have to be added to the "output" List and returned
		 */

		List output = new ArrayList();
		List<Item> items = new ArrayList<Item>();
		List<Bid> bids = new ArrayList<Bid>();
		List<Auction> auctions = new ArrayList<Auction>();
		
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://mysql.fall2018cse305.codyyarwood.com?useLegacyDatetimeCode=false&serverTimezone=America/New_York", "vbayadmin", "cse305rul3z");
			Statement state = con.createStatement();
			String sql = "SELECT DISTINCT * FROM vbaydb.Item I, vbaydb.Auction A, vbaydb.Post P WHERE P.CustomerID = " + Integer.valueOf(sellerID) + " AND P.AuctionID = A.AuctionID AND I.ItemID = A.ItemID";
			ResultSet rs = state.executeQuery(sql);
			while(rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("ItemID"));
				item.setDescription(rs.getString("Description"));
				item.setType(rs.getString("Type"));
				item.setName(rs.getString("Name"));
				items.add(item);
				
				Bid bid = new Bid();
				bid.setCustomerID(rs.getString("CustomerID"));
				bid.setBidPrice(rs.getDouble("ClosingBid"));
				bids.add(bid);
				
				Auction auction = new Auction();
				auction.setMinimumBid(rs.getDouble("MinimumBid"));
				auction.setBidIncrement(rs.getDouble("BidIncrement"));
				auction.setAuctionID(rs.getInt("AuctionID"));
				auctions.add(auction);
			}
			
		} catch(ClassNotFoundException e) {
			e.printStackTrace();
		} catch(SQLException e) {
			e.printStackTrace();
		}
		
		/*Sample data begins*/
//		for (int i = 0; i < 4; i++) {
//			Item item = new Item();
//			item.setItemID(123);
//			item.setDescription("sample description");
//			item.setType("BOOK");
//			item.setName("Sample Book");
//			items.add(item);
//			
//			Bid bid = new Bid();
//			bid.setCustomerID("123-12-1234");
//			bid.setBidPrice(120);
//			bids.add(bid);
//			
//			Auction auction = new Auction();
//			auction.setMinimumBid(100);
//			auction.setBidIncrement(10);
//			auction.setAuctionID(123);
//			auctions.add(auction);
//		}
		/*Sample data ends*/
		
		output.add(items);
		output.add(bids);
		output.add(auctions);
		
		return output;
	}

	public List<Item> getItemTypes() {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
		 * A query to fetch the unique item types has to be implemented
		 * # No such query assigned previously, types are a defined enum
		 * Each item type is to be added to the "item" object using setType method
		 */
		
		List<Item> items = new ArrayList<Item>();
		
		String[] types = { "BOOK", "CAR", "LAPTOP", "DVD" };
		
		for (int i = 0; i < 4; i++) {
			Item item = new Item();
			item.setType(types[i]);
			items.add(item);
		}
		
		return items;
	}

	public List getItemsByName(String itemName) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * The itemName, which is the item's name on which the query has to be implemented, is given as method parameter
		 * Query to fetch items containing itemName in their name has to be implemented
		 * Each item's corresponding auction data also has to be fetched
		 * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
		 * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items and auctions Lists are to be added to the "output" List and returned
		 */

		List output = new ArrayList();
		List<Item> items = new ArrayList<Item>();
		List<Auction> auctions = new ArrayList<Auction>();
		
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://mysql.fall2018cse305.codyyarwood.com?useLegacyDatetimeCode=false&serverTimezone=America/New_York", "vbayadmin", "cse305rul3z");
			Statement state = con.createStatement();
			String sql = "SELECT DISTINCT * FROM vbaydb.Item I, vbaydb.Auction A WHERE I.Name = \"" + itemName + "\" AND A.ItemID = I.ItemID";
			ResultSet rs = state.executeQuery(sql);
			while(rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("ItemID"));
				item.setDescription(rs.getString("Description"));
				item.setType(rs.getString("Type"));
				item.setName(rs.getString("Name"));
				items.add(item);
				
				Auction auction = new Auction();
				auction.setMinimumBid(rs.getDouble("MinimumBid"));
				auction.setBidIncrement(rs.getDouble("BidIncrement"));
				auction.setAuctionID(rs.getInt("AuctionID"));
				auctions.add(auction);
			}
			
		} catch(ClassNotFoundException e) {
			e.printStackTrace();
		} catch(SQLException e) {
			e.printStackTrace();
		}
		
		output.add(items);
		output.add(auctions);
		
		return output;
	}

	public List getItemsByType(String itemType) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * The itemType, which is the item's type on which the query has to be implemented, is given as method parameter
		 * Query to fetch items containing itemType as their type has to be implemented
		 * Each item's corresponding auction data also has to be fetched
		 * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
		 * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items and auctions Lists are to be added to the "output" List and returned
		 */

		List output = new ArrayList();
		List<Item> items = new ArrayList<Item>();
		List<Auction> auctions = new ArrayList<Auction>();
				
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://mysql.fall2018cse305.codyyarwood.com?useLegacyDatetimeCode=false&serverTimezone=America/New_York", "vbayadmin", "cse305rul3z");
			Statement state = con.createStatement();
			String sql = "SELECT DISTINCT * FROM vbaydb.Item I, vbaydb.Auction A WHERE A.ItemID = I.ItemID AND I.Type = \"" + itemType + "\"";
			ResultSet rs = state.executeQuery(sql);
			while(rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("ItemID"));
				item.setDescription(rs.getString("Description"));
				item.setType(rs.getString("Type"));
				item.setName(rs.getString("Name"));
				items.add(item);
				
				Auction auction = new Auction();
				auction.setMinimumBid(rs.getDouble("MinimumBid"));
				auction.setBidIncrement(rs.getDouble("BidIncrement"));
				auction.setAuctionID(rs.getInt("AuctionID"));
				auctions.add(auction);
			}
			
		} catch(ClassNotFoundException e) {
			e.printStackTrace();
		} catch(SQLException e) {
			e.printStackTrace();
		}
		
		output.add(items);
		output.add(auctions);
		
		return output;
	}

	public List<Item> getBestsellersForCustomer(String customerID) {

		/*
		 * The students code to fetch data from the database will be written here.
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList.
		 * Query to get the Best-seller list of items for a particular customer, indicated by the customerID, has to be implemented
		 * The customerID, which is the customer's ID for whom the Best-seller items have to be fetched, is given as method parameter
		 */

		List<Item> items = new ArrayList<Item>();
			
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://mysql.fall2018cse305.codyyarwood.com?useLegacyDatetimeCode=false&serverTimezone=America/New_York", "vbayadmin", "cse305rul3z");
			Statement state = con.createStatement();
			String sql = "SELECT * FROM vbaydb.Item I, vbaydb.Auction A WHERE A.ItemID = I.ItemID AND A.Buyer = " + Integer.valueOf(customerID) + " ORDER BY I.NumSold desc LIMIT 5";
			ResultSet rs = state.executeQuery(sql);
			while(rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("ItemID"));
				item.setDescription(rs.getString("Description"));
				item.setType(rs.getString("Type"));
				item.setName(rs.getString("Name"));
				item.setNumCopies(rs.getInt("NumAvailable"));
				items.add(item);
			}
			
		} catch(ClassNotFoundException e) {
			e.printStackTrace();
		} catch(SQLException e) {
			e.printStackTrace();
		}
		
		/*Sample data begins*/
//		for (int i = 0; i < 6; i++) {
//			Item item = new Item();
//			item.setItemID(123);
//			item.setDescription("sample description");
//			item.setType("BOOK");
//			item.setName("Sample Book");
//			item.setNumCopies(50);
//			items.add(item);
//		}
		/*Sample data ends*/
		
		return items;

	}

}
